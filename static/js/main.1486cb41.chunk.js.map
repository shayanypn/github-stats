{"version":3,"sources":["Components/Form.tsx","Components/RepoTable.tsx","Pages/Home.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","createStyles","root","padding","display","alignItems","width","input","flex","iconButton","divider","height","margin","Form","onSubmit","onClear","classes","useState","query","setQuery","searched","setSearched","Paper","component","className","event","preventDefault","IconButton","aria-label","InputBase","autoFocus","placeholder","inputProps","value","onChange","target","type","Divider","orientation","onClick","table","minWidth","tdName","justifyContent","flexDirection","RepoTable","data","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","items","map","row","key","id","scope","name","description","Avatar","alt","owner","login","src","avatar_url","Button","variant","color","theme","flexGrow","paddingTop","paddingBottom","title","textAlign","marginBottom","form","marginLeft","spacing","Home","React","incomplete_results","total_count","repositories","setRepositories","Container","maxWidth","Grid","container","justify","fetch","then","res","json","result","error","style","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1486cb41.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport SearchIcon from '@material-ui/icons/Search';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport Divider from '@material-ui/core/Divider';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      padding: '2px 4px',\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n    },\n    input: {\n      flex: 1,\n    },\n    iconButton: {\n      padding: 10,\n    },\n    divider: {\n      height: 28,\n      margin: 4,\n    },\n  }),\n);\n\ninterface IProps {\n  onSubmit: any,\n  onClear: any\n}\n\nconst Form: React.FC<IProps> = ({ onSubmit, onClear }) => {\n  const classes = useStyles();\n  const [query, setQuery] = useState('');\n  const [searched, setSearched] = useState(false);\n  const handleSubmit:any = (event:React.MouseEvent<HTMLElement>) => {\n    onSubmit(query);\n    setSearched(true);\n    event.preventDefault();\n  }\n  const handleClear:any = (event:React.MouseEvent<HTMLElement>) => {\n    setQuery('');\n    setSearched(false);\n    onClear();\n  }\n\n  return (\n    <Paper\n      component=\"form\"\n      className={classes.root}\n      onSubmit={handleSubmit}\n    >\n      <IconButton className={classes.iconButton} aria-label=\"GitHub\">\n        <GitHubIcon />\n      </IconButton>\n      <InputBase\n        className={classes.input}\n        autoFocus\n        placeholder=\"Search in GitHub repositories\"\n        inputProps={{ 'aria-label': 'Search in GitHub repositories' }}\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n      <IconButton\n        type=\"submit\"\n        className={classes.iconButton}\n        aria-label=\"search\"\n      >\n        <SearchIcon />\n      </IconButton>\n      {\n        searched \n        && (\n          <>\n            <Divider className={classes.divider} orientation=\"vertical\" />\n            <IconButton\n              type=\"button\"\n              className={classes.iconButton}\n              aria-label=\"close\"\n              onClick={handleClear}\n            >\n              <CloseIcon />\n            </IconButton>\n          </>\n        )\n      }\n    </Paper>\n  );\n}\n\nexport default Form;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { \n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n  Avatar,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n  tdName: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'left',\n    flexDirection: 'row',\n  }\n});\n\n\ninterface IProps {\n  data: any\n}\n\nconst RepoTable: React.FC<IProps> = ({ data }) => {\n  const classes = useStyles();\n  \n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell align=\"left\">Author</TableCell>\n            <TableCell align=\"left\"></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.items.map((row:any) => (\n            <TableRow key={row.id}>\n              <TableCell component=\"th\" scope=\"row\">\n                <strong>{row.name}</strong><br />\n                {row.description}\n              </TableCell>\n              <TableCell align=\"left\" className={classes.tdName}>\n                <Avatar alt={row.owner.login} src={row.owner.avatar_url} />\n                {' '}\n                {row.owner.login}\n              </TableCell>\n              <TableCell align=\"left\">\n                <Button variant=\"contained\" color=\"primary\">\n                  View Stat\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default RepoTable;","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport { Container, Grid } from '@material-ui/core';\nimport Form from '../Components/Form';\nimport RepoTable from '../Components/RepoTable';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      paddingTop: 40,\n      paddingBottom: 40\n    },\n    title: {\n      display: 'block',\n      width: '100%',\n      textAlign: 'center',\n      marginBottom: 0\n    },\n    form: {\n      padding: '2px 4px',\n      display: 'flex',\n      alignItems: 'center',\n      width: 400,\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1,\n    },\n    iconButton: {\n      padding: 10,\n    },\n    divider: {\n      height: 28,\n      margin: 4,\n    },\n  }),\n);\n\nfunction Home() {\n  const classes = useStyles();\n  const [repositories, setRepositories] = React.useState({\n    incomplete_results: false,\n    items: [],\n    total_count: 0\n  });\n\n  const handleSearch = (query:string) => {\n\n    fetch(`https://api.github.com/search/repositories?q=${query}`)\n      .then(res => res.json())\n      .then((result) => {\n          setRepositories(result);\n        },\n        (error) => {\n        }\n      )\n  };\n\n  const handleClear = () => {\n    setRepositories({\n      incomplete_results: false,\n      items: [],\n      total_count: 0\n    });\n  };\n\n  return (\n    <div className={classes.root}>\n      <Container maxWidth=\"md\">\n        <Grid container justify=\"center\" alignItems=\"center\">\n          <h1 className={classes.title}>GitHub Stat</h1>\n          <p>\n            GitHub Stat is tool that let you visualize your repositories statatistics.\n          </p>\n        </Grid>\n        <Grid container>\n          <Form\n            onSubmit={handleSearch}\n            onClear={handleClear}\n          />\n        </Grid>\n        <Grid container style={{ paddingTop: 20 }}>\n          {\n            repositories.items.length\n            ? (<RepoTable data={repositories} />)\n            : 'No item found!'\n          }\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Home from './Pages/Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}